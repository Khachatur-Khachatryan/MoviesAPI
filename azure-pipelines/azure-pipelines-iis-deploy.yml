trigger:
  branches:
    include:
      - develop
      - master

pr:
  branches:
    include:
      - develop
      - master

variables:
  - name: buildPlatform
    value: 'Any CPU'
  - name: buildConfiguration
    value: 'Release'
  - name: projectPath
    value: './CqrsApi.Core/CqrsApi.Core.csproj'
  - name: IISSiteName
    value: 'moviesapi'
  - name: IISSitePhysicalPath
    value: '%SystemDrive%\inetpub\wwwroot\$(IISSiteName)'
  - group: MoviesApi-Dev # keeps connection string
  - name: CertThumbprint
    value: 'c4349cd17eb84815b504571079a40d756db02396'
  - name: HostName
    value: 'movies.mangomesenger.company'

stages:
  - stage: 'Build_Test'
    jobs:
      - job: "Build"
        displayName: 'Build Test & Drop artifacts'
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - template: templates/dotnet-build-steps-template.yml
            parameters:
              buildConfiguration: $(buildConfiguration)
              buildPlatform: $(buildPlatform)
              projectPath: $(projectPath)

  - stage: 'dev'
    displayName: 'Deploy Movies dev'
    dependsOn: Build_Test
    condition: succeeded('Build_Test')
    jobs:
      - deployment: Deploy_Movies_Dev
        displayName: 'Deploy Movies dev'
        environment:
          name: dev
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                  
                - task: PowerShell@2
                  displayName: 'Delete SSL Cert If Exists'
                  inputs:
                    targetType: 'inline'
                    script: |
                      netsh http delete sslcert ipport=0.0.0.0:443
                  continueOnError: true

                - task: IISWebAppManagementOnMachineGroup@0
                  inputs:
                    EnableIIS: true
                    IISDeploymentType: 'IISWebsite'
                    ActionIISWebsite: 'CreateOrUpdateWebsite'
                    WebsiteName: '$(IISSiteName)-$(Environment.Name)'
                    WebsitePhysicalPath: '$(IISSitePhysicalPath)'
                    AddBinding: true
                    Bindings: |
                      {
                          bindings: [
                            {
                              "protocol":"http",
                              "ipAddress":"*",
                              "hostname":"$(HostName)",
                              "port":"80",
                              "sslThumbprint":"",
                              "sniFlag":false
                            },
                            {
                              "protocol":"https",
                              "ipAddress":"*",
                              "hostname":"$(HostName)",
                              "port":"443",
                              "sslThumbprint":"$(CertThumbprint)",
                              "sniFlag":false
                            }
                          ]
                      }
                    CreateOrUpdateAppPoolForWebsite: true
                    ConfigureAuthenticationForWebsite: true
                    AppPoolNameForWebsite: '$(IISSiteName)-$(Environment.Name)'
                    DotNetVersionForWebsite: 'No Managed Code'
                    PipeLineModeForWebsite: 'Integrated'
                    AppPoolIdentityForWebsite: 'ApplicationPoolIdentity'
                    AnonymousAuthenticationForWebsite: true
                    BasicAuthenticationForWebsite: false
                    WindowsAuthenticationForWebsite: false

                - task: IISWebAppDeploymentOnMachineGroup@0
                  displayName: 'IIS Web App Deploy'
                  inputs:
                    WebSiteName: '$(IISSiteName)-$(Environment.Name)'
                    TakeAppOfflineFlag: true
                    Package: '$(Pipeline.Workspace)/drop/$(BuildConfiguration)/CqrsApi.Core.zip'
                    JSONFiles: '**/appsettings.json'